CATEGORIES
statement;
expr;
tipo;
cuerpoPrograma;

NODES

program -> cuerpoPrograma*;

structDefinition:cuerpoPrograma -> nombre:string atributos:varDefinition* metodos:function*;

varDefinition:cuerpoPrograma -> declaracion;
declaracion-> nombre:string tipo:tipo;

function:cuerpoPrograma -> nombre:string parametros:declaracion* tipoRetorno:tipo cuerpo:statement*;

// Statements
print:statement -> expr*;
printSp:statement -> expr*;
printLn:statement -> expr*;
asignacion:statement -> left:expr right:expr;
return:statement -> expr?;
oneExpr:statement -> expr;
if:statement -> condition:expr thenBlock:statement* elseBlock:statement*; 
while:statement -> condition:expr body:statement*;
read:statement -> expr;
stmtFunctionCall:statement -> nombre:string expr*;

// Expresiones
fieldAccess:expr -> object:expr field:string;
arrayAccess:expr -> array:expr index:expr;
cast:expr ->tipo:tipo target:expr;
not:expr -> expr;
operacionAritmetica:expr -> left:expr operador:string right:expr;
operacionLogica:expr -> left:expr operador:string right:expr;
comparacion:expr -> left:expr operador:string right:expr;
functionCall:expr -> nombre:string expr*;
parentesis:expr -> expr;
variable:expr -> nombre:string;
intLiteral:expr -> int;
realLiteral:expr -> float;
charLiteral:expr -> char;

// Tipos
intType:tipo ->;
floatType:tipo ->;
charType:tipo ->;
voidType:tipo ->;
arrayType:tipo -> tipoBase:tipo int;
nomType:tipo -> nombre:string;


// -----------------------
ATTRIBUTE GRAMMAR Identification

variable -> declaracion; 
functionCall ->function;
stmtFunctionCall ->function;
nomType ->structDefinition;

// -----------------------
ATTRIBUTE GRAMMAR TypeChecking

expr -> type:tipo;
expr -> lvalue:boolean;
statement -> [inherited] padre:function;

// -----------------------
ATTRIBUTE GRAMMAR MemoryAllocation
declaracion -> [inh] address:int;    // Inherited attribute
cuerpoPrograma ->[inh] address:int;

// -----------------------
CODE SPECIFICATION Mapl

run[program]
prepara[cuerpoPrograma]
define[declaracion]
ejecuta[statement]
valor[expr]
direccion[expr]
tipo[tipo]




