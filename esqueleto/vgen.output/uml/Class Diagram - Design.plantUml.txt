' Generated with VGen 2.0.0

@startuml

class Position {
    +int getLine()
    +int getColumn()
    +boolean lessThan(Position other)
    +boolean greaterThan(Position other)
}

interface AST {
    +updatePositions(Object... children)
    +updatePositions(Position start, Position end)
    +Object accept(Visitor visitor, Object param)
}

AST *-[#404040,thickness=1]- Position : start >
AST *-[#404040,thickness=1]- Position : end >


interface Statement {
}
AST <|-[#808080]- Statement
Statement -[#3366cc,thickness=3]-  Function #text:3366cc : padre >

interface Expr {
	..<color:#3366cc> TypeChecking </color>..
	+<color:#3366cc>boolean lvalue</color>
}
AST <|-[#808080]- Expr
Expr -[#3366cc,thickness=3]-  Tipo #text:3366cc : type >

interface Tipo {
}
AST <|-[#808080]- Tipo

interface CuerpoPrograma {
	..<color:#669900> MemoryAllocation </color>..
	+<color:#669900>int address</color>
}
AST <|-[#808080]- CuerpoPrograma

interface AST {
}

class Program {
}
AST <|-[#808080]- Program
Program o-[#404040,thickness=2]- "✱" CuerpoPrograma : cuerpoProgramas >

class StructDefinition {
	+String nombre
}
CuerpoPrograma <|-[#808080]- StructDefinition
StructDefinition o-[#404040,thickness=2]- "✱" VarDefinition : atributos >
StructDefinition o-[#404040,thickness=2]- "✱" Function : metodos >

class VarDefinition {
}
CuerpoPrograma <|-[#808080]- VarDefinition
VarDefinition o-[#404040,thickness=2]-  Declaracion : declaracion >

class Declaracion {
	+String nombre
	..<color:#669900> MemoryAllocation </color>..
	+<color:#669900>int address</color>
	+<color:#669900>int ambito</color>
}
AST <|-[#808080]- Declaracion
Declaracion o-[#404040,thickness=2]-  Tipo : tipo >

class Function {
	+String nombre
}
CuerpoPrograma <|-[#808080]- Function
Function o-[#404040,thickness=2]- "✱" Declaracion : parametros >
Function o-[#404040,thickness=2]- "✱" VarDefinition : variables >
Function o-[#404040,thickness=2]-  Tipo : tipoRetorno >
Function o-[#404040,thickness=2]- "✱" Statement : cuerpo >

class Print {
}
Statement <|-[#808080]- Print
Print o-[#404040,thickness=2]- "✱" Expr : exprs >

class PrintSp {
}
Statement <|-[#808080]- PrintSp
PrintSp o-[#404040,thickness=2]- "✱" Expr : exprs >

class PrintLn {
}
Statement <|-[#808080]- PrintLn
PrintLn o-[#404040,thickness=2]- "✱" Expr : exprs >

class Asignacion {
}
Statement <|-[#808080]- Asignacion
Asignacion o-[#404040,thickness=2]-  Expr : left >
Asignacion o-[#404040,thickness=2]-  Expr : right >

class Return {
}
Statement <|-[#808080]- Return
Return o-[#404040,thickness=2]- "0..1" Expr : expr >

class If {
}
Statement <|-[#808080]- If
If o-[#404040,thickness=2]-  Expr : condition >
If o-[#404040,thickness=2]- "✱" Statement : thenBlock >
If o-[#404040,thickness=2]- "✱" Statement : elseBlock >

class While {
}
Statement <|-[#808080]- While
While o-[#404040,thickness=2]-  Expr : condition >
While o-[#404040,thickness=2]- "✱" Statement : body >

class Read {
}
Statement <|-[#808080]- Read
Read o-[#404040,thickness=2]-  Expr : expr >

class StmtFunctionCall {
	+String nombre
}
Statement <|-[#808080]- StmtFunctionCall
StmtFunctionCall o-[#404040,thickness=2]- "✱" Expr : exprs >
StmtFunctionCall -[#ff6600,thickness=3]-  Function #text:ff6600 : function >

class FieldAccess {
	+String field
}
Expr <|-[#808080]- FieldAccess
FieldAccess o-[#404040,thickness=2]-  Expr : object >
FieldAccess -[#3366cc,thickness=3]-  StructDefinition #text:3366cc : structAccedido >

class ArrayAccess {
}
Expr <|-[#808080]- ArrayAccess
ArrayAccess o-[#404040,thickness=2]-  Expr : array >
ArrayAccess o-[#404040,thickness=2]-  Expr : index >

class Cast {
}
Expr <|-[#808080]- Cast
Cast o-[#404040,thickness=2]-  Tipo : tipo >
Cast o-[#404040,thickness=2]-  Expr : target >

class Not {
}
Expr <|-[#808080]- Not
Not o-[#404040,thickness=2]-  Expr : expr >

class OperacionAritmetica {
	+String operador
}
Expr <|-[#808080]- OperacionAritmetica
OperacionAritmetica o-[#404040,thickness=2]-  Expr : left >
OperacionAritmetica o-[#404040,thickness=2]-  Expr : right >

class OperacionLogica {
	+String operador
}
Expr <|-[#808080]- OperacionLogica
OperacionLogica o-[#404040,thickness=2]-  Expr : left >
OperacionLogica o-[#404040,thickness=2]-  Expr : right >

class Comparacion {
	+String operador
}
Expr <|-[#808080]- Comparacion
Comparacion o-[#404040,thickness=2]-  Expr : left >
Comparacion o-[#404040,thickness=2]-  Expr : right >

class FunctionCall {
	+String nombre
}
Expr <|-[#808080]- FunctionCall
FunctionCall o-[#404040,thickness=2]- "✱" Expr : exprs >
FunctionCall -[#ff6600,thickness=3]-  Function #text:ff6600 : function >

class Parentesis {
}
Expr <|-[#808080]- Parentesis
Parentesis o-[#404040,thickness=2]-  Expr : expr >

class Variable {
	+String nombre
}
Expr <|-[#808080]- Variable
Variable -[#ff6600,thickness=3]-  Declaracion #text:ff6600 : declaracion >

class IntLiteral {
	+int intValue
}
Expr <|-[#808080]- IntLiteral

class RealLiteral {
	+float floatValue
}
Expr <|-[#808080]- RealLiteral

class CharLiteral {
	+String name
}
Expr <|-[#808080]- CharLiteral

class IntType {
}
Tipo <|-[#808080]- IntType

class FloatType {
}
Tipo <|-[#808080]- FloatType

class CharType {
}
Tipo <|-[#808080]- CharType

class VoidType {
}
Tipo <|-[#808080]- VoidType

class ArrayType {
	+int intValue
}
Tipo <|-[#808080]- ArrayType
ArrayType o-[#404040,thickness=2]-  Tipo : tipoBase >

class NomType {
	+String nombre
}
Tipo <|-[#808080]- NomType
NomType -[#ff6600,thickness=3]-  StructDefinition #text:ff6600 : structDefinition >

@enduml
